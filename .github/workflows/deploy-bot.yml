name: 🤖 Deploy Discord Bot to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'index.js'
      - 'package.json'
      - '.github/workflows/deploy-bot.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: 🚀 Deploy Bot to VPS
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
          
      - name: 📦 Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PATH: ${{ secrets.VPS_BOT_PATH }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
        run: |
          # VPS'e bağlan ve deployment yap
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'ENDSSH'
            set -e
            
            echo "🔄 Starting bot deployment..."
            
            # Proje dizinine git
            cd ${{ secrets.VPS_BOT_PATH }}
            
            # Git pull ile güncel kodu çek
            echo "📥 Pulling latest code..."
            git pull origin main
            
            # Node modules temizle ve yeniden yükle
            echo "🧹 Cleaning node_modules..."
            rm -rf node_modules
            rm -f package-lock.json
            
            echo "📦 Installing dependencies..."
            npm install --production
            
            # Eski logları temizle (30 günden eski)
            echo "🗑️ Cleaning old logs..."
            find logs/ -name "*.log" -mtime +30 -delete 2>/dev/null || true
            
            # Database backup
            echo "💾 Creating database backup..."
            if [ -f "data/database.json" ]; then
              cp data/database.json data/database-backup-$(date +%Y%m%d-%H%M%S).json
              # Eski backup'ları sil (10 taneden fazla)
              ls -t data/database-backup-*.json | tail -n +11 | xargs rm -f 2>/dev/null || true
            fi
            
            # .env dosyasını güncelle
            echo "⚙️ Updating .env file..."
            cat > .env << EOF
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}
          SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}
          EMBED_COLOR=#0099ff
          DEFAULT_VOLUME=50
          MAX_QUEUE_SIZE=100
          DAILY_AMOUNT=100
          WORK_AMOUNT=50
          CRIME_AMOUNT=200
          MAX_BET=1000
          MIN_BET=10
          AUTO_MOD=false
          MAX_WARNS=3
          MUTE_DURATION=3600000
          PREMIUM_ENABLED=false
          LOGGING_ENABLED=true
          LOG_LEVEL=info
          FILE_LOGGING=true
          FEATURE_MUSIC=true
          FEATURE_ECONOMY=true
          FEATURE_MODERATION=true
          FEATURE_LEVELING=true
          FEATURE_TICKETS=true
          FEATURE_GIVEAWAYS=true
          NODE_ENV=production
          EOF
            
            # PM2 ile botu yeniden başlat
            echo "🔄 Restarting bot with PM2..."
            
            # PM2 kurulu mu kontrol et
            if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              npm install -g pm2
            fi
            
            # PM2 process'i durdur ve sil
            pm2 delete neuroviabot 2>/dev/null || true
            
            # PM2 ile botu başlat
            pm2 start index.js --name neuroviabot \
              --max-memory-restart 500M \
              --time \
              --log-date-format "YYYY-MM-DD HH:mm:ss" \
              --merge-logs \
              --out-file logs/pm2-out.log \
              --error-file logs/pm2-error.log
            
            # PM2'yi sistem başlangıcına ekle
            pm2 save
            pm2 startup systemd -u $USER --hp $HOME 2>/dev/null || true
            
            echo "✅ Bot deployment completed!"
            echo "📊 Bot status:"
            pm2 status neuroviabot
            pm2 logs neuroviabot --lines 10 --nostream
          ENDSSH
          
      - name: ✅ Deployment Success
        if: success()
        run: |
          echo "🎉 Bot successfully deployed to VPS!"
          echo "Bot is now running 24/7 with PM2"
          
      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "💥 Deployment failed! Check the logs above."
          exit 1
